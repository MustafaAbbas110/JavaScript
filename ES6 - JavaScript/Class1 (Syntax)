===========================================================
//let and const.
function getClothing(isCold) {
  if (isCold) {
    var freezing = 'Grab a jacket!';
  } else {
    var hot = 'It’s a shorts kind of day.';
    console.log(freezing);
  }
}
//Output -> undefined
//This is Because of Hoisting
/*
let and const
Variables declared with let and const eliminate this specific issue of hoisting because they’re scoped to the block,
not to the function. Previously, when you used var, variables were either scoped globally or locally to an entire function scope.
*/
function getClothing(isCold) {
  if (isCold) {
    const freezing = 'Grab a jacket!';
  } else {
    const hot = 'It’s a shorts kind of day.';
    console.log(freezing);
  }
}
//Output -> freezing is not defined
/*
Rules for using let and const
let and const also have some other interesting properties.
- Variables declared with let can be reassigned, but can’t be redeclared in the same scope.
- Variables declared with const must be assigned an initial value, but can’t be redeclared in the same scope, and can’t be reassigned.
*/
let instructor = 'James';
instructor = 'Richard';
console.log(instructor);
//Output -> Richard

===========================================================
//let and const (2)
/*
 * Programming Quiz: Using Let and Const (1-1)
 */

const CHARACTER_LIMIT = 255;
const posts = [
	"#DeepLearning transforms everything from self-driving cars to language translations. AND it's our new Nanodegree!",
	"Within your first week of the VR Developer Nanodegree Program, you'll make your own virtual reality app",
	"I just finished @udacity's Front-End Web Developer Nanodegree. Check it out!"
];

// prints posts to the console
function displayPosts() {
	for (let i = 0; i < posts.length; i++) {
		console.log(posts[i].slice(0, CHARACTER_LIMIT));
	}
}

displayPosts();

===========================================================
//Template Literals
/*
Template literals are essentially string literals that include embedded expressions.
Denoted with backticks (` `) instead of single quotes ( '' ) or double quotes ( "" ),
template literals can contain placeholders which are represented using ${expression}.
This makes it much easier to build strings.
*/
let message = `${student.name} please see ${teacher.name} in ${teacher.room} to pick up your report card.`;
//Returns: Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.
/*
TIP: Embedded expressions inside template literals can do more than just reference variables.
You can perform operations, call functions and use loops inside embedded expressions!
*/

===========================================================
//Template Literals (2)
/*
 * Programming Quiz: Build an HTML Fragment (1-2)
 */

const cheetah = {
    name: 'Cheetah',
    scientificName: 'Acinonyx jubatus',
    lifespan: '10-12 years',
    speed: '68-75 mph',
    diet: 'carnivore',
    summary: 'Fastest mammal on land, the cheetah can reach speeds of 60 or perhaps even 70 miles (97 or 113 kilometers) an hour over short distances. It usually chases its prey at only about half that speed, however. After a chase, a cheetah needs half an hour to catch its breath before it can eat.',
    fact: 'Cheetahs have “tear marks” that run from the inside corners of their eyes down to the outside edges of their mouth.'
};

// creates an animal trading card
function createAnimalTradingCardHTML(animal) {
    const cardHTML = `<div class="card">
        <h3 class="name"> ${ animal.name } </h3>
        <img src=" ${ animal.name } .jpg" alt=" ${ animal.name }" class="picture">
        <div class="description">
            <p class="fact"> ${ animal.fact } </p>
            <ul class="details">
                <li><span class="bold">Scientific Name</span>:  ${ animal.scientificName } </li>
                <li><span class="bold">Average Lifespan</span>:  ${ animal.lifespan } </li>
                <li><span class="bold">Average Speed</span>:  ${ animal.speed } </li>
                <li><span class="bold">Diet</span>:  ${ animal.diet } </li>
            </ul>
            <p class="brief"> ${ animal.summary } </p>
        </div> 
    </div>`;

    return cardHTML;
}

console.log(createAnimalTradingCardHTML(cheetah));

===========================================================
//Destructuring

//Destructuring values from an array
const point = [10, 25, -34];
const [x, y, z] = point;
console.log(x, y, z);
//Prints: 10 25 -34
/*
TIP: You can also ignore values when destructuring arrays.
For example, const [x, , z] = point; ignores the y coordinate and discards it.
*/

//Destructuring values from an object
const gemstone = {
  type: 'quartz',
  color: 'rose',
  carat: 21.29
};
const {type, color, carat} = gemstone;
console.log(type, color, carat);
//Prints: quartz rose 21.29
/*
TIP: You can also specify the values you want to select when destructuring an object.
For example, let {color} = gemstone; will only select the color property from the gemstone object.
*/

const circle = {
  radius: 10,
  color: 'orange',
  getArea: function() {
    return Math.PI * this.radius * this.radius;
  },
  getCircumference: function() {
    return 2 * Math.PI * this.radius;
  }
};
let {radius, getArea, getCircumference} = circle;

//Output -> NaN
/*
When you destructure the object and store the getArea() method into the getArea variable,
it no longer has access to this in the circle object which results in an area that is NaN.
*/

===========================================================
//Destructuring (2)

/*
 * Programming Quiz: Destructuring Arrays (1-3)
 *
 * Use destructuring to initialize the variables `one`, `two`, and `three`
 * with the colors from the `things` array.
 */
const things = ['red', 'basketball', 'paperclip', 'green', 'computer', 'earth', 'udacity', 'blue', 'dogs'];
const [one,,,two,,,,three]=things;
const colors = `List of Colors
1. ${one}
2. ${two}
3. ${three}`;
console.log(colors);

===========================================================
//Object literal shorthand

let type = 'quartz';
let color = 'rose';
let carat = 21.29;

const gemstone = {type,color,carat}
//When name is same as object attributes

let gemstone = {
  type,
  color,
  carat,
  calculateWorth() { ... }
};
//In ES6 we don't need to type function in objects 

===========================================================
//for..of loop
/*
The for...of loop is the most recent addition to the family of for loops in JavaScript.
It combines the strengths of its siblings, the for loop and the for...in loop,
to loop over any type of data that is iterable (meaning it follows the iterable protocol which we'll look at in lesson 3).
By default, this includes the data types String, Array,
Map, and Set—notably absent from this list is the Object data type (i.e. {}). Objects are not iterable, by default.
*/
//The for...in loop
//The for...in loop improves upon the weaknesses of the for loop by eliminating the counting logic and exit condition.
const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

for (const index in digits) {
  console.log(digits[index]);
}
/*
But, you still have to deal with the issue of using an index to access the values of the array,
and that stinks; it almost makes it more confusing than before.
Also, the for...in loop can get you into big trouble when you need to add an extra method to an array (or another object).
Because for...in loops loop over all enumerable properties,
this means if you add any additional properties to the array's prototype, then those properties will also appear in the loop.
*/
Array.prototype.decimalfy = function() {
  for (let i = 0; i < this.length; i++) {
    this[i] = this[i].toFixed(2);
  }
};

const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

for (const index in digits) {
  console.log(digits[index]);
}
/*
Prints:
0
1
2
3
4
5
6
7
8
9
function() {
	for (let i = 0; i < this.length; i++) {
		this[i] = this[i].toFixed(2);
	}
}
*/
/*
Finally, we have the mighty for...of loop.
For...of loop
The for...of loop is used to loop over any type of data that is iterable.
You write a for...of loop almost exactly like you would write a for...in loop, except you swap out in with of and you can drop the index.
*/
const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
for (const digit of digits) {
  console.log(digit);
}

===========================================================
//for..of Loop (2)
/*
 * Programming Quiz: Writing a For...of Loop (1-4)
 */
const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
for (const day of days) {
  var upperDay = day.charAt(0).toUpperCase() + day.slice(1);
  console.log(upperDay);
}

===========================================================
//speed operator
const books = ["Don Quixote", "The Hobbit", "Alice in Wonderland", "Tale of Two Cities"];
console.log(...books);
//Prints: Don Quixote The Hobbit Alice in Wonderland Tale of Two Cities

const primes = new Set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]);
console.log(...primes);
//Prints: 2 3 5 7 11 13 17 19 23 29

const fruits = ["apples", "bananas", "pears"];
const vegetables = ["corn", "potatoes", "carrots"];
const produce = [...fruits,...vegetables];
console.log(produce);

//Prints: [ 'apples', 'bananas', 'pears', 'corn', 'potatoes', 'carrots' ]

===========================================================
//Rest Parameter
/// ...
const order = [20.17, 18.67, 1.50, "cheese", "eggs", "milk", "bread"];
const [total, subtotal, tax, ...items] = order;
console.log(total, subtotal, tax, items);
//Prints: 20.17 18.67 1.5 ["cheese", "eggs", "milk", "bread"]

function sum(...nums) {
  let total = 0;  
  for(const num of nums) {
    total += num;
  }
  return total;
}
// we can pass indefinite number of values in this sum function

===========================================================
//Rest Parameter (2)

function average(...nums) {
    let total = 0;
    for(const num of nums){
        total+=num;
    }
    
    return nums.length !== 0 ? total/nums.length : total ;
}

console.log(average(2, 6));
console.log(average(2, 3, 3, 5, 7, 10));
console.log(average(7, 1432, 12, 13, 100));
console.log(average());


