// Symbol
// A symbol is a unique and immutable data type that is often used to identify object properties.
// To create a symbol, you write Symbol() with an optional string as its description.

const sym1 = Symbol('apple');
console.log(sym1);
// Symbol(apple)

const sym2 = Symbol('banana');
const sym3 = Symbol('banana');
console.log(sym2 === sym3);
// false

onst bowl = {
  'apple': { color: 'red', weight: 136.078 },
  'banana': { color: 'yellow', weight: 183.151 },
  'orange': { color: 'orange', weight: 170.097 },
  'banana': { color: 'yellow', weight: 176.845 }
};
console.log(bowl);
// Object {apple: Object, banana: Object, orange: Object}

// Instead of adding another banana to the bowl, our previous banana is overwritten by the new banana being added to the bowl. To fix this problem, we can use symbols.

const bowl = {
  [Symbol('apple')]: { color: 'red', weight: 136.078 },
  [Symbol('banana')]: { color: 'yellow', weight: 183.15 },
  [Symbol('orange')]: { color: 'orange', weight: 170.097 },
  [Symbol('banana')]: { color: 'yellow', weight: 176.845 }
};
console.log(bowl);
// Object {Symbol(apple): Object, Symbol(banana): Object, Symbol(orange): Object, Symbol(banana): Object}

===========================================================================================================
// iterable & iterator protocols
// The Iterable Protocol
// The iterable protocol is used for defining and customizing the iteration behavior of objects.
// What that really means is you now have the flexibility in ES6 to specify a way for iterating through values in an object.
// For some objects, they already come built-in with this behavior. For example, strings and arrays are examples of built-in iterables.

const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
for (const digit of digits) {
  console.log(digit);
}
/*
0
1
2
3
4
5
6
7
8
9
*/
// If you recall from earlier lesson 1, any object that is iterable can use the new for...of loop. Later in this lesson,
//you’ll also learn about Sets and Maps which are other examples of built-in iterables.
/*
How it Works
In order for an object to be iterable, it must implement the iterable interface.
If you come from a language like Java or C, then you’re probably familiar with interfaces,
but for those of you who aren’t, that basically means that in order for an object to be iterable
it must contain a default iterator method. This method will define how the object should be iterated.
*/
// The iterator method, which is available via the constant [Symbol.iterator],
// is a zero arguments function that returns an iterator object. An iterator object is an object that conforms to the iterator protocol.

// The Iterator Protocol
// The iterator protocol is used to define a standard way that an object produces a sequence of values.
// What that really means is you now have a process for defining how an object will iterate.
// This is done through implementing the .next() method.
/*
How it Works
An object becomes an iterator when it implements the .next() method. The .next() method is a zero arguments
function that returns an object with two properties:
*/
// value : the data representing the next value in the sequence of values within the object
// done : a boolean representing if the iterator is done going through the sequence of values
// If done is true, then the iterator has reached the end of its sequence of values.
// If done is false, then the iterator is able to produce another value in its sequence of values.
// Here’s the example from earlier, but instead we are using the array’s default iterator to step through the each value in the array.

const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
const arrayIterator = digits[Symbol.iterator]();

console.log(arrayIterator.next());
console.log(arrayIterator.next());
console.log(arrayIterator.next());
//Object {value: 0, done: false}
//Object {value: 1, done: false}
//Object {value: 2, done: false}

===========================================================================================================
// Sets in javaScript

const games = new Set();
console.log(games);
// Set {}

const games = new Set(['Super Mario Bros.', 'Banjo-Kazooie', 'Mario Kart', 'Super Mario Bros.']);
console.log(games);
// Set {'Super Mario Bros.', 'Banjo-Kazooie', 'Mario Kart'}
/*
The biggest differences between a set and an array are:
1. Sets are not indexed-based - you do not refer to items in a set based on their position in the set
2. items in a Set can’t be accessed individually
*/

const games = new Set(['Super Mario Bros.', 'Banjo-Kazooie', 'Mario Kart', 'Super Mario Bros.']);
games.add('Banjo-Tooie');
games.add('Age of Empires');
games.delete('Super Mario Bros.');
console.log(games);
// Set {'Banjo-Kazooie', 'Mario Kart', 'Banjo-Tooie', 'Age of Empires'}

games.clear()
console.log(games);
// Set {}

/*
TIP: If you attempt to .add() a duplicate item to a Set,
you won’t receive an error, but the item will not be added to the Set.
Also, if you try to .delete() an item that is not in a Set, you won’t receive an error, and the Set will remain unchanged.

.add() returns the Set if an item is successfully added. On the other hand,
.delete() returns a Boolean (true or false) depending on successful deletion.
*/

const months = new Set(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']);
console.log(months.size);
// 12

console.log(months.has('September'));
// true

console.log(months.values());
// SetIterator {'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'}


===========================================================================================================

