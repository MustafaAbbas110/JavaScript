//Arrow functions
//ES6 introduces a new kind of function called the arrow function. Arrow functions are very similar to regular functions in behavior, but are quite different syntactically. The following code takes a list of names and converts each one to uppercase using a regular function:

const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(function(name) { 
  return name.toUpperCase();
});
//The code below does the same thing except instead of passing a regular function to the map() method, it passes an arrow function. Notice the arrow in the arrow function ( => ) in the code below:

const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(
  name => name.toUpperCase()
);

/*
With the function above, there are only a few steps for converting the existing "normal" function into an arrow function.
remove the function keyword
remove the parentheses
remove the opening and closing curly braces
remove the return keyword
remove the semicolon
add an arrow ( => ) between the parameter list and the function body
*/

const names = ['Afghanistan', 'Aruba', 'Bahamas', 'Chile', 'Fiji', 'Gabon', 'Luxembourg', 'Nepal', 'Singapore', 'Uganda', 'Zimbabwe'];
const longNames = names.filter( name => name.length > 6 );

//Regular functions can be either function declarations or function expressions,
//however arrow functions are always expressions. In fact, their full name is "arrow function expressions",
//so they can only be used where an expression is valid. This includes being:

/*
1. stored in a variable,
2. passed as an argument to a function,
3.and stored in an object's property.
*/
//One confusing syntax is when an arrow function is stored in a variable.
const greet = name => `Hello ${name}!`;
//In the code above, the arrow function is stored in the greet variable and you'd call it like this:
greet('Abbas');
//Returns: Hello Abbas!

// empty parameter list requires parentheses
const sayHi = () => console.log('Hello Udacity Student!');
sayHi();

// multiple parameter list requires parentheses
const sayHi = (a,b) => console.log(`Hello Udacity Student! ${a}, ${b}`);
sayHi(1,2);

//Concise and block body syntax
//All of the arrow functions we've been looking at have only had a single expression as the function body:

const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map(
  name => name.toUpperCase()
);
//This format of the function body is called the "concise body syntax". The concise syntax:
//1. has no curly braces surrounding the function body
//2. and automatically returns the expression.
//If you need more than just a single line of code in your arrow function's body,
//then you can use the "block body syntax".

const upperizedNames = ['Farrin', 'Kagure', 'Asser'].map( name => {
  name = name.toUpperCase();
  return `${name} has ${name.length} characters in their name`;
});

//Important things to keep in mind with the block syntax:
//it uses curly braces to wrap the function body
//and a return statement needs to be used to actually return something from the function.

const myFunction = function() {
  //...
}

to

const myFunction = () => {
  //...
}
=================================================================================
